[{"/home/antoine/Gdrive/Autoencoders/axx/src/index.jsx":"1","/home/antoine/Gdrive/Autoencoders/axx/src/reportWebVitals.ts":"2","/home/antoine/Gdrive/Autoencoders/axx/src/App.jsx":"3","/home/antoine/Gdrive/Autoencoders/axx/src/components/ExperimentsTable.jsx":"4","/home/antoine/Gdrive/Autoencoders/axx/src/components/Waveform.jsx":"5"},{"size":478,"mtime":1611623072832,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1611623072832,"results":"8","hashOfConfig":"7"},{"size":2571,"mtime":1611907197983,"results":"9","hashOfConfig":"7"},{"size":15898,"mtime":1611907771682,"results":"10","hashOfConfig":"7"},{"size":2311,"mtime":1611902311274,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ippmxw",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/home/antoine/Gdrive/Autoencoders/axx/src/index.jsx",[],["26","27"],"/home/antoine/Gdrive/Autoencoders/axx/src/reportWebVitals.ts",[],["28","29"],"/home/antoine/Gdrive/Autoencoders/axx/src/App.jsx",[],"/home/antoine/Gdrive/Autoencoders/axx/src/components/ExperimentsTable.jsx",["30","31","32"],"import React, {useMemo, useState, useEffect} from \"react\";\nimport axios from 'axios';\nimport ReactTable, {\n    useTable,\n    useSortBy,\n    useExpanded,\n    useGroupBy,\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useAsyncDebounce\n} from 'react-table';\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\nimport Waveform from \"./Waveform\";\n\nimport '../App.scss';\n\nconst jsonData = require(\"../experiments.json\");\n\nfunction ColumnManager({getToggleHideAllColumnsProps, allColumns, setColumnOrder}) {\n    const [stateCols, setState] = useState([]);\n\n    const reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        if (result[startIndex].isGrouped) {\n            return result\n        }\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n        return result;\n    };\n\n    const sortColumns = (columns) => {\n        // console.log(columns.filter(c => c.isGrouped).length);\n        return [\n            ...columns.filter(c => c.isGrouped),\n            ...columns.filter(c => c.isVisible && !c.isGrouped),\n            ...columns.filter(c => !c.isVisible)\n        ]\n    };\n\n    useEffect(() => {\n        // console.log(\"SETTING STATE:\", sortColumns(allColumns).map(c => c.id));\n        setState(sortColumns(allColumns));\n    }, [allColumns, setColumnOrder]);\n\n    function onDragEnd(result) {\n        if (!result.destination) {\n            return;\n        }\n\n        if (result.destination.index === result.source.index) {\n            return;\n        }\n        const columns = reorder(\n            stateCols,\n            result.source.index,\n            result.destination.index\n        );\n        // console.log(\"REORDERED:\", sortColumns(columns).map(c => c.id));\n        setColumnOrder(sortColumns(columns).map(c => c.id));\n    }\n\n    return (\n        <div className={\"column-manager\"}>\n            <div className={\"content\"}>\n                <div className={\"column-toggle\"}>\n                    <label>\n                        <input type=\"checkbox\" style={{display: 'none'}}\n                               onChange={getToggleHideAllColumnsProps().onChange}>\n                        </input><i\n                        className={\"fa \" + (getToggleHideAllColumnsProps().checked ? \"fa-eye\" : \"fa-eye-slash\")}>{' '}</i>\n                        <span className={\"column-name\"}>{\"All columns\"}</span>\n                    </label>\n                </div>\n                <DragDropContext onDragEnd={onDragEnd}>\n                    <Droppable droppableId={\"list\"}>\n                        {provided => (\n                            <div ref={provided.innerRef} {...provided.droppableProps}>\n                                {stateCols.map((column, index) => (\n\n                                    <Draggable key={column.id} index={index} draggableId={column.id}>\n                                        {provided => (\n                                            <div className={\"column-toggle\"}>\n                                                <label\n                                                    ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                                    <input type=\"checkbox\" style={{display: 'none'}}\n                                                           onChange={column.getToggleHiddenProps().onChange}>\n                                                    </input><i\n                                                    className={\"fa \" + (column.isVisible ? \"fa-eye\" : \"fa-eye-slash\")}>{' '}</i>\n                                                    <span className={\"column-name\"}>{column.Header}</span>\n                                                </label>\n                                            </div>)}\n                                    </Draggable>\n                                ))}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                </DragDropContext>\n            </div>\n        </div>\n    )\n}\n\n// simple filter\nfunction GlobalFilter({\n                          globalFilter,\n                          setGlobalFilter,\n                      }) {\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200);\n\n    return (\n        <div className={\"search-bar\"}>\n            <input\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`Search : ...`}\n                style={{\n                    fontSize: '1.1rem',\n                }}\n            />\n        </div>\n    )\n}\n\nconst Table = ({inputColumns, data, audios}) => {\n    const initialGroupBy = [\"project\", \"DB\"];\n    const initialHidden = inputColumns.filter(\n        c => c.id.toUpperCase() !== c.id && ![\"Audios\", \"project\", \"accum_outputs\", \"pad_input\", \"with_skip_conv\", \"with_residual_conv\"].includes(c.Header))\n        .map(c => c.id);\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        allColumns,\n        getToggleHideAllColumnsProps,\n        setColumnOrder,\n        state,\n        setGlobalFilter\n    } = useTable({\n            columns: inputColumns, data,\n            initialState: {\n                groupBy: initialGroupBy,\n                hiddenColumns: initialHidden\n            }\n        },\n        useColumnOrder,\n        useGlobalFilter,\n        useGroupBy,\n        useSortBy,\n        useExpanded,\n    );\n    return (\n        <>\n            <div className={\"control-panel\"}>\n                {/* Global Filter */}\n                <ColumnManager getToggleHideAllColumnsProps={getToggleHideAllColumnsProps}\n                               allColumns={allColumns}\n                               setColumnOrder={setColumnOrder}\n                />\n                <GlobalFilter\n                    globalFilter={state.globalFilter}\n                    setGlobalFilter={setGlobalFilter}\n                />\n                <br/>\n                {/*<div style={{margin: \"auto\", width: \"max-content\"}}>Displaying {rows.length} results</div>*/}\n            </div>\n            {/*<pre>{JSON.stringify(state, null, 2)}</pre>*/}\n            {/* The Table */}\n            <br/>\n            <table {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.id === \"expander\" ?\n                                    <span className={\"column-title\"}\n                                          style={{\n                                              top: \"-1%\",\n                                              left: \"5%\",\n                                              width: \"100px\"\n                                          }}>{column.render('Header')}</span>\n                                    : <div className={\"header-element\"}>\n                                        <span className={\"column-title\"}>{column.render('Header')}</span>\n                                        {/* Add a sort direction indicator */}\n                                        <span className={\"column-icons\"}>\n                                            <i className={\"fa fa-close\"}\n                                               onClick={() => column.toggleHidden(true)}\n                                               style={{color: \"#919191\", width: \"16px\"}}\n                                            />\n                                            <i className={\"fa fa-chevron-up\"}\n                                               style={{\n                                                   color: column.isSortedDesc === undefined ? \"#919191\" : (column.isSortedDesc ? \"green\" : '#919191'),\n                                               }}/>\n                                            <i className={\"fa fa-chevron-down\"}\n                                               style={{\n                                                   color: column.isSortedDesc === undefined ? \"#919191\" : (!column.isSortedDesc ? \"green\" : '#919191'),\n                                               }}/>\n                                            {column.canGroupBy ? (\n                                                // If the column can be grouped, let's add a toggle\n                                                <i {...column.getGroupByToggleProps()}\n                                                   className={\"fa fa-indent\"}\n                                                   style={{\n                                                       color: column.isGrouped ? \"green\" : '#919191',\n                                                   }}/>\n                                            ) : null}\n                                        </span>\n                                    </div>\n                                }\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {rows.map(\n                    (row, i) => {\n                        prepareRow(row);\n                        return (\n                            <React.Fragment key={row.getRowProps().key}>\n                                {/* first we display the params of the experiment */}\n                                <tr {...row.getRowProps()}>\n                                    {row.cells.map(cell => {\n                                        return (\n                                            <td\n                                                {...cell.getCellProps()}\n                                                className={(cell.isGrouped\n                                                    ? \"grouped-\"\n                                                    : cell.isAggregated\n                                                        ? \"aggregated-\"\n                                                        : cell.isPlaceholder\n                                                            ? \"placeholder-\" : \"\") + \"cell\"}>\n                                                {cell.isGrouped ? (\n                                                    // If it's a grouped cell, add an expander and row count\n                                                    <>\n                                                  <span {...row.getToggleRowExpandedProps()}>\n                                                    {row.isExpanded ? <i className={\"fa fa-chevron-down\"}/> :\n                                                        <i className={\"fa fa-chevron-right\"}/>}\n                                                  </span>{' '}\n                                                        {cell.render('Cell')} ({row.subRows.length})\n                                                    </>\n                                                ) : cell.isAggregated ? (\n                                                    // If the cell is aggregated, use the Aggregated\n                                                    // renderer for cell\n                                                    cell.render('Aggregated')\n                                                ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                                                    // Otherwise, just render the regular cell\n                                                    cell.render('Cell')\n                                                )}\n                                            </td>\n                                        )\n                                    })}\n                                </tr>\n                                {/*then the audios if the row is expanded */}\n                                {(row.isExpanded && !row.cells.some(cell => cell.isGrouped)) &&\n                                <tr>\n                                    <td colSpan={allColumns.length} className={\"audio-container\"}>\n                                        {audios[row.original.id] ?\n                                            audios[row.original.id].map((x, i) => {\n                                                return <Waveform\n                                                    key={x}\n                                                    url={x}\n                                                    title={x.split(\"/\")[4]}\n                                                    handleFinish={() => {\n                                                        const list = audios[row.original.id];\n                                                        const index = list.indexOf(x) + 1;\n                                                        if (index < list.length) {\n                                                            const id = list[index].split(\"/\")[4];\n                                                            const element = document.getElementById(\"play-\" + id);\n                                                            element.click()\n                                                        }\n                                                    }}\n                                                />\n                                            })\n                                            : <span style={{fontSize: \"x-large\"}}>No audio...</span>}\n                                    </td>\n                                </tr>\n                                }\n                            </React.Fragment>\n                        )\n                    }\n                )}\n                </tbody>\n            </table>\n        </>\n    )\n};\n\nexport default function ExperimentsTable() {\n    const [columns, setColumns] = useState([]);\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        // columns are dynamically defined so we need the set of\n        // keys in all the experiments\n        let columns = new Set();\n        jsonData.forEach(\n            item => Object.keys(item).forEach(val => {\n                if (![\"_id\", \"audios\"].includes(val)) {\n                    columns.add(val)\n                }\n            }));\n        columns = Array.from([...columns]);\n        // format and prepend extra columns for the UI\n        columns = columns.map(name => {\n            return {Header: name, accessor: name, id: name}\n        });\n        // column for expanding/collapsing audios\n        columns.unshift({\n            Header: \"Audios\",\n            id: 'expander',\n            Cell: ({row}) => (\n                <span {...row.getToggleRowExpandedProps()} className={\"grouped-column\"}>\n                            {row.isExpanded ?\n                                <i className={\"fa fa-chevron-down\"}/>\n                                : <i className={\"fa fa-chevron-right\"}/>}\n                    {(!row.cells.some(cell => cell.isGrouped) && row.original.hasOwnProperty(\"audios\")) ?\n                        ` (${row.original.audios.length.toString()})`\n                        : null}\n                        </span>\n            )\n        });\n        setColumns(columns);\n        setData(jsonData);\n    }, []);\n    const audios = {};\n    data.forEach(exp => audios[exp.id] = exp.audios);\n    const memoColumns = useMemo(() => columns, [columns]);\n    const memoData = useMemo(() => data, [data]);\n    // console.log(memoColumns);\n    return (\n        <Table inputColumns={memoColumns} data={memoData} audios={audios}/>\n    )\n}","/home/antoine/Gdrive/Autoencoders/axx/src/components/Waveform.jsx",["33"],"import React, {useEffect, useRef, useState} from \"react\";\nimport WaveSurfer from \"wavesurfer.js\";\n\nconst waveSurferOptions = ref => ({\n    container: ref,\n    waveColor: \"lightgray\",\n    progressColor: \"#6996e6\",\n    cursorColor: \"#6996e6\",\n    barWidth: 1,\n    barHeight: 4,\n    maxCanvasWidth: 200,\n    responsive: true,\n    height: 50,\n    // Use the PeakCache to improve rendering speed of large waveforms.\n    partialRender: false\n});\n\nexport default function Waveform({url, title, handleFinish}) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = waveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n\n        wavesurfer.current.load(url);\n\n        wavesurfer.current.on(\"ready\", function () {\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(0.5);\n            }\n        wavesurfer.current.on(\"seek\", () => {\n            setPlay(true);\n            wavesurfer.current.play()\n        });\n        wavesurfer.current.on(\"finish\", () => {\n            handleFinish()\n            setPlay(false)\n        });\n        });\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    const handlePlayPause = () => {\n        setPlay(!playing);\n        wavesurfer.current.playPause();\n    };\n\n    return (\n        // the container\n        <div className={\"waveform-element\"}>\n            {/* the header */}\n            <div className={\"waveform-header\"}>\n                <i className={\"play-button fa \" + (playing ? \"fa-pause-circle\" : \"fa-play-circle-o\")}\n                   id={`play-${title}`}\n                   onClick={handlePlayPause}>\n                </i>\n                <span className={\"waveform-title\"}>\n                {\"  \" + title}\n                </span>\n            </div>\n            {/* the waveform (ui kit must be turned off for it to display correctly) */}\n            <div className={\"waveform\"}\n                 ref={waveformRef}>\n            </div>\n        </div>\n    );\n}",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":2,"column":8,"nodeType":"40","messageId":"41","endLine":2,"endColumn":13},{"ruleId":"38","severity":1,"message":"42","line":3,"column":8,"nodeType":"40","messageId":"41","endLine":3,"endColumn":18},{"ruleId":"38","severity":1,"message":"43","line":9,"column":5,"nodeType":"40","messageId":"41","endLine":9,"endColumn":15},{"ruleId":"44","severity":1,"message":"45","line":49,"column":8,"nodeType":"46","endLine":49,"endColumn":13,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'ReactTable' is defined but never used.","'useFilters' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleFinish'. Either include it or remove the dependency array. If 'handleFinish' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [handleFinish, url]",{"range":"53","text":"54"},[1487,1492],"[handleFinish, url]"]