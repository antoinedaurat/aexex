{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/antoine/Gdrive/Autoencoders/axx/frontend/src/components/ExperimentsTable.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useMemo, useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport ReactTable, { useTable, useSortBy, useExpanded, useGroupBy, useColumnOrder, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Waveform from \"./Waveform\";\n\nconst jsonData = require(\"../experiments.json\");\n\nfunction ColumnManager({\n  getToggleHideAllColumnsProps,\n  allColumns,\n  setColumnOrder\n}) {\n  _s();\n\n  const [stateCols, setState] = useState([]);\n\n  const reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n\n    if (result[startIndex].isGrouped) {\n      return result;\n    }\n\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  };\n\n  useEffect(() => {\n    if (stateCols.length === 0) {\n      console.log(\"SETTING ALL:\", allColumns.map(c => c.id));\n      setState([...allColumns.filter(c => c.isGrouped), ...allColumns.filter(c => c.isVisible && !c.isGrouped), ...allColumns.filter(c => !c.isVisible)]);\n    }\n  }, [stateCols.length, allColumns]);\n  useEffect(() => {\n    if (stateCols.length > 0) {\n      setColumnOrder(stateCols.map(c => c.id));\n    }\n  }, [stateCols, setColumnOrder]);\n\n  function onDragEnd(result) {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    const columns = reorder(stateCols, result.source.index, result.destination.index);\n    console.log(\"REORDERED:\", columns.map(c => c.id));\n    setState([...columns.filter(c => c.isGrouped), ...columns.filter(c => c.isVisible && !c.isGrouped), ...columns.filter(c => !c.isVisible)]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-toggle\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          ...getToggleHideAllColumnsProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), ' ', \"All columns\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"list\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [stateCols.map((column, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            index: index,\n            draggableId: column.id,\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"column-toggle\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                ref: provided.innerRef,\n                ...provided.draggableProps,\n                ...provided.dragHandleProps,\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"checkbox\",\n                  ...column.getToggleHiddenProps()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 49\n                }, this), ' ', column.Header]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 41\n            }, this)\n          }, column.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n} // simple filter\n\n\n_s(ColumnManager, \"jo9VcS9x1YqhNcsuVY92lOcSs7E=\");\n\n_c = ColumnManager;\n\nfunction GlobalFilter({\n  globalFilter,\n  setGlobalFilter\n}) {\n  _s2();\n\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"search-bar\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value || \"\",\n      onChange: e => {\n        setValue(e.target.value);\n        onChange(e.target.value);\n      },\n      placeholder: `Search : ...`,\n      style: {\n        fontSize: '1.1rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n  return [useAsyncDebounce];\n});\n\n_c2 = GlobalFilter;\n\nconst Table = ({\n  columns,\n  data,\n  audios\n}) => {\n  _s3();\n\n  const initialGroupBy = [\"project\", \"DB\"];\n  const initialHidden = columns.filter(c => c.id.toUpperCase() !== c.id && ![\"Audios\", \"project\", \"accum_outputs\", \"pad_input\", \"with_skip_conv\", \"with_residual_conv\"].includes(c.Header)).map(c => c.id);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    allColumns,\n    getToggleHideAllColumnsProps,\n    setColumnOrder,\n    visibleColumns,\n    state,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    initialState: {\n      groupBy: initialGroupBy,\n      hiddenColumns: initialHidden\n    }\n  }, useColumnOrder, useGlobalFilter, useGroupBy, useSortBy, useExpanded);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: [/*#__PURE__*/_jsxDEV(GlobalFilter, {\n        globalFilter: state.globalFilter,\n        setGlobalFilter: setGlobalFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ColumnManager, {\n        getToggleHideAllColumnsProps: getToggleHideAllColumnsProps,\n        allColumns: allColumns,\n        setColumnOrder: setColumnOrder\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"auto\",\n          width: \"max-content\"\n        },\n        children: [\"Displaying \", rows.length, \" results\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n            children: column.id === \"expander\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"column-title\",\n              style: {\n                top: \"-1%\",\n                left: \"5%\",\n                width: \"100px\"\n              },\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"column-title\",\n                children: column.render('Header')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"column-icons\",\n                children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-close\",\n                  onClick: () => column.toggleHidden(true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-chevron-up\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: \"fa fa-chevron-down\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 45\n                }, this), column.canGroupBy ?\n                /*#__PURE__*/\n                // If the column can be grouped, let's add a toggle\n                _jsxDEV(\"i\", { ...column.getGroupByToggleProps(),\n                  className: \"fa fa-indent\",\n                  style: {\n                    color: column.isGrouped ? \"green\" : '#6D6D6D'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 200,\n                  columnNumber: 49\n                }, this) : null]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  className: cell.isGrouped ? \"grouped-column\" : \"\",\n                  style: {\n                    background: cell.isGrouped ? '#a6ff4474' : cell.isAggregated ? '#ffa10045' : cell.isPlaceholder ? '#ff330042' : 'white'\n                  },\n                  children: cell.isGrouped ?\n                  /*#__PURE__*/\n                  // If it's a grouped cell, add an expander and row count\n                  _jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", { ...row.getToggleRowExpandedProps(),\n                      children: row.isExpanded ? /*#__PURE__*/_jsxDEV(\"i\", {\n                        className: \"fa fa-chevron-down\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 243,\n                        columnNumber: 71\n                      }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n                        className: \"fa fa-chevron-right\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 244,\n                        columnNumber: 57\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 242,\n                      columnNumber: 51\n                    }, this), ' ', cell.render('Cell'), \" (\", row.subRows.length, \")\"]\n                  }, void 0, true) : cell.isAggregated ? // If the cell is aggregated, use the Aggregated\n                  // renderer for cell\n                  cell.render('Aggregated') : cell.isPlaceholder ? null : // For cells with repeated values, render null\n                  // Otherwise, just render the regular cell\n                  cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 45\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 33\n            }, this), row.isExpanded && !row.cells.some(cell => cell.isGrouped) && /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                colSpan: rows.length,\n                className: \"audio-container\",\n                children: audios[row.original.id] && audios[row.original.id].map((x, i) => {\n                  return /*#__PURE__*/_jsxDEV(Waveform, {\n                    url: \"http://localhost:5000/audio\" + x,\n                    title: x.split(\"/\")[4],\n                    handleFinish: () => {\n                      const list = audios[row.original.id];\n                      const index = list.indexOf(x) + 1;\n\n                      if (index < list.length) {\n                        const id = list[index].split(\"/\")[4];\n                        const element = document.getElementById(\"play-\" + id);\n                        element.click();\n                      }\n                    }\n                  }, x, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 266,\n                    columnNumber: 52\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 33\n            }, this)]\n          }, row.getRowProps().key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s3(Table, \"tGIlibkuDDoLSQZKASkXXUT9M3o=\", false, function () {\n  return [useTable];\n});\n\n_c3 = Table;\nexport default function ExperimentsTable() {\n  _s4();\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // columns are dynamically defined so we need the set of\n    // keys in all the experiments\n    let columns = new Set();\n    jsonData.forEach(item => Object.keys(item).forEach(val => {\n      if (![\"_id\", \"audios\"].includes(val)) {\n        columns.add(val);\n      }\n    }));\n    columns = Array.from([...columns]); // format and prepend extra columns for the UI\n\n    columns = columns.map(name => {\n      return {\n        Header: name,\n        accessor: name,\n        id: name\n      };\n    }); // column for expanding/collapsing audios\n\n    columns.unshift({\n      Header: \"Audios\",\n      id: 'expander',\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(\"span\", { ...row.getToggleRowExpandedProps(),\n        className: \"grouped-column\",\n        children: [row.isExpanded ? /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-chevron-down\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-chevron-right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 35\n        }, this), !row.cells.some(cell => cell.isGrouped) && row.original.hasOwnProperty(\"audios\") ? `(${row.original.audios.length.toString()})` : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this)\n    });\n    setColumns(columns);\n    setData(jsonData);\n  }, []);\n  const audios = {};\n  data.forEach(exp => audios[exp.id] = exp.audios);\n  const memoColumns = useMemo(() => columns, [columns]);\n  const memoData = useMemo(() => data, [data]); // console.log(memoColumns);\n\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: memoColumns,\n    data: memoData,\n    audios: audios\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 9\n  }, this);\n}\n\n_s4(ExperimentsTable, \"4/H7xsSP51yPeUy+L4CesN6wI2s=\");\n\n_c4 = ExperimentsTable;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ColumnManager\");\n$RefreshReg$(_c2, \"GlobalFilter\");\n$RefreshReg$(_c3, \"Table\");\n$RefreshReg$(_c4, \"ExperimentsTable\");","map":{"version":3,"sources":["/home/antoine/Gdrive/Autoencoders/axx/frontend/src/components/ExperimentsTable.jsx"],"names":["React","useMemo","useState","useEffect","axios","ReactTable","useTable","useSortBy","useExpanded","useGroupBy","useColumnOrder","useFilters","useGlobalFilter","useAsyncDebounce","DragDropContext","Droppable","Draggable","Waveform","jsonData","require","ColumnManager","getToggleHideAllColumnsProps","allColumns","setColumnOrder","stateCols","setState","reorder","list","startIndex","endIndex","result","Array","from","isGrouped","removed","splice","length","console","log","map","c","id","filter","isVisible","onDragEnd","destination","index","source","columns","provided","innerRef","droppableProps","column","draggableProps","dragHandleProps","getToggleHiddenProps","Header","placeholder","GlobalFilter","globalFilter","setGlobalFilter","value","setValue","onChange","undefined","e","target","fontSize","Table","data","audios","initialGroupBy","initialHidden","toUpperCase","includes","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","visibleColumns","state","preGlobalFilteredRows","initialState","groupBy","hiddenColumns","margin","width","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","top","left","render","toggleHidden","canGroupBy","getGroupByToggleProps","color","row","i","getRowProps","cells","cell","getCellProps","background","isAggregated","isPlaceholder","getToggleRowExpandedProps","isExpanded","subRows","some","original","x","split","indexOf","element","document","getElementById","click","key","ExperimentsTable","setColumns","setData","Set","forEach","item","Object","keys","val","add","name","accessor","unshift","Cell","hasOwnProperty","toString","exp","memoColumns","memoData"],"mappings":"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","sourcesContent":["import React, {useMemo, useState, useEffect} from \"react\";\nimport axios from 'axios';\nimport ReactTable, {\n    useTable,\n    useSortBy,\n    useExpanded,\n    useGroupBy,\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useAsyncDebounce\n} from 'react-table';\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\nimport Waveform from \"./Waveform\";\n\nconst jsonData = require(\"../experiments.json\");\n\nfunction ColumnManager({getToggleHideAllColumnsProps, allColumns, setColumnOrder}) {\n    const [stateCols, setState] = useState([]);\n\n    const reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        if (result[startIndex].isGrouped) {\n            return result\n        }\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n        return result;\n    };\n\n    useEffect(() => {\n        if (stateCols.length === 0) {\n            console.log(\"SETTING ALL:\", allColumns.map(c => c.id));\n            setState([\n                ...allColumns.filter(c => c.isGrouped),\n                ...allColumns.filter(c => c.isVisible && !c.isGrouped),\n                ...allColumns.filter(c => !c.isVisible)]\n            )\n        }\n    }, [stateCols.length, allColumns]);\n\n    useEffect(() => {\n        if (stateCols.length > 0) {\n            setColumnOrder(stateCols.map(c => c.id))\n        }\n    }, [stateCols, setColumnOrder]);\n\n    function onDragEnd(result) {\n        if (!result.destination) {\n            return;\n        }\n\n        if (result.destination.index === result.source.index) {\n            return;\n        }\n        const columns = reorder(\n            stateCols,\n            result.source.index,\n            result.destination.index\n        );\n        console.log(\"REORDERED:\", columns.map(c => c.id));\n        setState([\n            ...columns.filter(c => c.isGrouped),\n            ...columns.filter(c => c.isVisible && !c.isGrouped),\n            ...columns.filter(c => !c.isVisible)]);\n    }\n\n    return (\n        <div className={\"column-manager\"}>\n            <div className={\"column-toggle\"}>\n                <label>\n                    <input type=\"checkbox\" {...getToggleHideAllColumnsProps()} />{' '}\n                    {\"All columns\"}\n                </label>\n            </div>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId={\"list\"}>\n                    {provided => (\n                        <div ref={provided.innerRef} {...provided.droppableProps}>\n                            {stateCols.map((column, index) => (\n\n                                <Draggable key={column.id} index={index} draggableId={column.id}>\n                                    {provided => (\n                                        <div className={\"column-toggle\"}>\n                                            <label\n                                                ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                                <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\n                                                {column.Header}\n                                            </label>\n                                        </div>)}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </div>\n    )\n}\n\n// simple filter\nfunction GlobalFilter({\n                          globalFilter,\n                          setGlobalFilter,\n                      }) {\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200);\n\n    return (\n        <div className={\"search-bar\"}>\n            <input\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`Search : ...`}\n                style={{\n                    fontSize: '1.1rem',\n                }}\n            />\n        </div>\n    )\n}\n\nconst Table = ({columns, data, audios}) => {\n    const initialGroupBy = [\"project\", \"DB\"];\n    const initialHidden = columns.filter(\n        c => c.id.toUpperCase() !== c.id && ![\"Audios\", \"project\", \"accum_outputs\", \"pad_input\", \"with_skip_conv\", \"with_residual_conv\"].includes(c.Header))\n        .map(c => c.id);\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        allColumns,\n        getToggleHideAllColumnsProps,\n        setColumnOrder,\n        visibleColumns,\n        state,\n        preGlobalFilteredRows,\n        setGlobalFilter\n    } = useTable({\n            columns, data,\n            initialState: {\n                groupBy: initialGroupBy,\n                hiddenColumns: initialHidden\n            }\n        },\n        useColumnOrder,\n        useGlobalFilter,\n        useGroupBy,\n        useSortBy,\n        useExpanded,\n    );\n    return (\n        <>\n            <div className={\"control-panel\"}>\n                {/* Global Filter */}\n                <GlobalFilter\n                    globalFilter={state.globalFilter}\n                    setGlobalFilter={setGlobalFilter}\n                />\n                <ColumnManager getToggleHideAllColumnsProps={getToggleHideAllColumnsProps}\n                               allColumns={allColumns}\n                               setColumnOrder={setColumnOrder}\n                />\n                <br/>\n                <div style={{margin: \"auto\", width: \"max-content\"}}>Displaying {rows.length} results</div>\n            </div>\n            {/*<pre>{JSON.stringify(state.hiddenColumns, null, 2)}</pre>*/}\n            {/* The Table */}\n            <br/>\n            <table {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.id === \"expander\" ?\n                                    <span className={\"column-title\"}\n                                          style={{\n                                              top: \"-1%\",\n                                              left: \"5%\",\n                                              width: \"100px\"\n                                          }}>{column.render('Header')}</span>\n                                    : <>\n                                        <span className={\"column-title\"}>{column.render('Header')}</span>\n                                        {/* Add a sort direction indicator */}\n                                        <span className={\"column-icons\"}>\n                                            <i className={\"fa fa-close\"} onClick={() => column.toggleHidden(true)}/>\n                                            <i className={\"fa fa-chevron-up\"}/>\n                                            <i className={\"fa fa-chevron-down\"}/>\n                                            {column.canGroupBy ? (\n                                                // If the column can be grouped, let's add a toggle\n                                                <i {...column.getGroupByToggleProps()}\n                                                   className={\"fa fa-indent\"}\n                                                   style={{\n                                                       color: column.isGrouped ? \"green\" : '#6D6D6D',\n                                                   }}/>\n                                            ) : null}\n                                        </span>\n                                    </>\n                                }\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {rows.map(\n                    (row, i) => {\n                        prepareRow(row);\n                        return (\n                            <React.Fragment key={row.getRowProps().key}>\n                                {/* first we display the params of the experiment */}\n                                <tr {...row.getRowProps()}>\n                                    {row.cells.map(cell => {\n                                        return (\n                                            <td\n                                                // color the cell depending on what type it is given\n                                                // from the useGroupBy hook\n                                                {...cell.getCellProps()}\n                                                className={cell.isGrouped ? \"grouped-column\" : \"\"}\n                                                style={{\n                                                    background: cell.isGrouped\n                                                        ? '#a6ff4474'\n                                                        : cell.isAggregated\n                                                            ? '#ffa10045'\n                                                            : cell.isPlaceholder\n                                                                ? '#ff330042'\n                                                                : 'white',\n                                                }}\n                                            >\n                                                {cell.isGrouped ? (\n                                                    // If it's a grouped cell, add an expander and row count\n                                                    <>\n                                                  <span {...row.getToggleRowExpandedProps()}>\n                                                    {row.isExpanded ? <i className={\"fa fa-chevron-down\"}/> :\n                                                        <i className={\"fa fa-chevron-right\"}/>}\n                                                  </span>{' '}\n                                                        {cell.render('Cell')} ({row.subRows.length})\n                                                    </>\n                                                ) : cell.isAggregated ? (\n                                                    // If the cell is aggregated, use the Aggregated\n                                                    // renderer for cell\n                                                    cell.render('Aggregated')\n                                                ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                                                    // Otherwise, just render the regular cell\n                                                    cell.render('Cell')\n                                                )}\n                                            </td>\n                                        )\n                                    })}\n                                </tr>\n                                {/*then the audios if the row is expanded */}\n                                {(row.isExpanded && !row.cells.some(cell => cell.isGrouped)) &&\n                                <tr>\n                                    <td colSpan={rows.length} className={\"audio-container\"}>\n                                        {audios[row.original.id] &&\n                                        audios[row.original.id].map((x, i) => {\n                                            return <Waveform\n                                                key={x}\n                                                url={\"http://localhost:5000/audio\" + x}\n                                                title={x.split(\"/\")[4]}\n                                                handleFinish={() => {\n                                                    const list = audios[row.original.id];\n                                                    const index = list.indexOf(x) + 1;\n                                                    if (index < list.length) {\n                                                        const id = list[index].split(\"/\")[4];\n                                                        const element = document.getElementById(\"play-\" + id);\n                                                        element.click()\n                                                    }\n                                                }}\n                                            />\n                                        })}\n                                    </td>\n                                </tr>\n                                }\n                            </React.Fragment>\n                        )\n                    }\n                )}\n                </tbody>\n            </table>\n        </>\n    )\n};\n\nexport default function ExperimentsTable() {\n    const [columns, setColumns] = useState([]);\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        // columns are dynamically defined so we need the set of\n        // keys in all the experiments\n        let columns = new Set();\n        jsonData.forEach(\n            item => Object.keys(item).forEach(val => {\n                if (![\"_id\", \"audios\"].includes(val)) {\n                    columns.add(val)\n                }\n            }));\n        columns = Array.from([...columns]);\n        // format and prepend extra columns for the UI\n        columns = columns.map(name => {\n            return {Header: name, accessor: name, id: name}\n        });\n        // column for expanding/collapsing audios\n        columns.unshift({\n            Header: \"Audios\",\n            id: 'expander',\n            Cell: ({row}) => (\n                <span {...row.getToggleRowExpandedProps()} className={\"grouped-column\"}>\n                            {row.isExpanded ?\n                                <i className={\"fa fa-chevron-down\"}/>\n                                : <i className={\"fa fa-chevron-right\"}/>}\n                    {(!row.cells.some(cell => cell.isGrouped) && row.original.hasOwnProperty(\"audios\")) ?\n                        `(${row.original.audios.length.toString()})`\n                        : null}\n                        </span>\n            )\n        });\n        setColumns(columns);\n        setData(jsonData);\n    }, []);\n    const audios = {};\n    data.forEach(exp => audios[exp.id] = exp.audios);\n    const memoColumns = useMemo(() => columns, [columns]);\n    const memoData = useMemo(() => data, [data]);\n    // console.log(memoColumns);\n    return (\n        <Table columns={memoColumns} data={memoData} audios={audios}/>\n    )\n}"]},"metadata":{},"sourceType":"module"}