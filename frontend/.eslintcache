[{"/home/antoine/Gdrive/Autoencoders/axx/frontend/src/index.tsx":"1","/home/antoine/Gdrive/Autoencoders/axx/frontend/src/reportWebVitals.ts":"2","/home/antoine/Gdrive/Autoencoders/axx/frontend/src/App.tsx":"3","/home/antoine/Gdrive/Autoencoders/axx/frontend/src/components/ExperimentsTable.jsx":"4","/home/antoine/Gdrive/Autoencoders/axx/frontend/src/components/Waveform.jsx":"5"},{"size":478,"mtime":1611623072832,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1611623072832,"results":"8","hashOfConfig":"7"},{"size":1257,"mtime":1611623072832,"results":"9","hashOfConfig":"7"},{"size":14978,"mtime":1611624874712,"results":"10","hashOfConfig":"7"},{"size":2338,"mtime":1611623072832,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1ri0028",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},"/home/antoine/Gdrive/Autoencoders/axx/frontend/src/index.tsx",[],["28","29"],"/home/antoine/Gdrive/Autoencoders/axx/frontend/src/reportWebVitals.ts",[],"/home/antoine/Gdrive/Autoencoders/axx/frontend/src/App.tsx",["30","31"],"import React from \"react\";\nimport \"./App.css\";\n\nimport ExperimentsTable from \"./components/ExperimentsTable\";\n\nexport default class App extends React.Component<{}, { projectName: string, id: string }> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            projectName: \"\",\n            id: \"\",\n        }\n        this.onExperimentClick = this.onExperimentClick.bind(this);\n    }\n\n    onExperimentClick(proj: string, id: string) {\n        this.setState({projectName: proj.split(\"/\")[1], id: id})\n    }\n\n    render() {\n        const name = this.state.projectName;\n        const id = this.state.id;\n        return (\n            <div className={\"App\"}>\n                <div>\n                    <h3 id={\"logo\"}>\n                        {\"< a u d i o - e X p e r i m e n t - e X p l o r e r >\"}\n                    </h3>\n                </div>\n                <div>\n                    <ExperimentsTable />\n                </div>\n            </div>\n        );\n    }\n}\n/* - experiment header : ID, link to neptune, tags (= example's labels),( description,) losses, properties\n* - hparams tree (data, model, optim)\n* - list of available checkpoints\n* - POST : tag, description, note / comment,\n* - DELETE : audio, checkpoints\n* - */","/home/antoine/Gdrive/Autoencoders/axx/frontend/src/components/ExperimentsTable.jsx",["32","33","34","35","36"],"import React, {useMemo, useState, useEffect} from \"react\";\nimport axios from 'axios';\nimport ReactTable, {\n    useTable,\n    useSortBy,\n    useExpanded,\n    useGroupBy,\n    useColumnOrder,\n    useFilters,\n    useGlobalFilter,\n    useAsyncDebounce\n} from 'react-table';\nimport {DragDropContext, Droppable, Draggable} from \"react-beautiful-dnd\";\nimport Waveform from \"./Waveform\";\n\nconst jsonData = require(\"../experiments.json\");\n\nfunction ColumnManager({getToggleHideAllColumnsProps, allColumns, setColumnOrder}) {\n    const [stateCols, setState] = useState([]);\n\n    const reorder = (list, startIndex, endIndex) => {\n        const result = Array.from(list);\n        if (result[startIndex].isGrouped) {\n            return result\n        }\n        const [removed] = result.splice(startIndex, 1);\n        result.splice(endIndex, 0, removed);\n        return result;\n    };\n\n    useEffect(() => {\n        if (stateCols.length === 0) {\n            console.log(\"SETTING ALL:\", allColumns.map(c => c.id));\n            setState([\n                ...allColumns.filter(c => c.isGrouped),\n                ...allColumns.filter(c => c.isVisible && !c.isGrouped),\n                ...allColumns.filter(c => !c.isVisible)]\n            )\n        }\n    }, [stateCols.length, allColumns]);\n\n    useEffect(() => {\n        if (stateCols.length > 0) {\n            setColumnOrder(stateCols.map(c => c.id))\n        }\n    }, [stateCols, setColumnOrder]);\n\n    function onDragEnd(result) {\n        if (!result.destination) {\n            return;\n        }\n\n        if (result.destination.index === result.source.index) {\n            return;\n        }\n        const columns = reorder(\n            stateCols,\n            result.source.index,\n            result.destination.index\n        );\n        console.log(\"REORDERED:\", columns.map(c => c.id));\n        setState([\n            ...columns.filter(c => c.isGrouped),\n            ...columns.filter(c => c.isVisible && !c.isGrouped),\n            ...columns.filter(c => !c.isVisible)]);\n    }\n\n    return (\n        <div className={\"column-manager\"}>\n            <div className={\"column-toggle\"}>\n                <label>\n                    <input type=\"checkbox\" {...getToggleHideAllColumnsProps()} />{' '}\n                    {\"All columns\"}\n                </label>\n            </div>\n            <DragDropContext onDragEnd={onDragEnd}>\n                <Droppable droppableId={\"list\"}>\n                    {provided => (\n                        <div ref={provided.innerRef} {...provided.droppableProps}>\n                            {stateCols.map((column, index) => (\n\n                                <Draggable key={column.id} index={index} draggableId={column.id}>\n                                    {provided => (\n                                        <div className={\"column-toggle\"}>\n                                            <label\n                                                ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                                <input type=\"checkbox\" {...column.getToggleHiddenProps()} />{' '}\n                                                {column.Header}\n                                            </label>\n                                        </div>)}\n                                </Draggable>\n                            ))}\n                            {provided.placeholder}\n                        </div>\n                    )}\n                </Droppable>\n            </DragDropContext>\n        </div>\n    )\n}\n\n// simple filter\nfunction GlobalFilter({\n                          globalFilter,\n                          setGlobalFilter,\n                      }) {\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200);\n\n    return (\n        <div className={\"search-bar\"}>\n            <input\n                value={value || \"\"}\n                onChange={e => {\n                    setValue(e.target.value);\n                    onChange(e.target.value);\n                }}\n                placeholder={`Search : ...`}\n                style={{\n                    fontSize: '1.1rem',\n                }}\n            />\n        </div>\n    )\n}\n\nconst Table = ({columns, data, audios}) => {\n    const initialGroupBy = [\"project\", \"DB\"];\n    const initialHidden = columns.filter(\n        c => c.id.toUpperCase() !== c.id && ![\"Audios\", \"project\", \"accum_outputs\", \"pad_input\", \"with_skip_conv\", \"with_residual_conv\"].includes(c.Header))\n        .map(c => c.id);\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n        allColumns,\n        getToggleHideAllColumnsProps,\n        setColumnOrder,\n        visibleColumns,\n        state,\n        preGlobalFilteredRows,\n        setGlobalFilter\n    } = useTable({\n            columns, data,\n            initialState: {\n                groupBy: initialGroupBy,\n                hiddenColumns: initialHidden\n            }\n        },\n        useColumnOrder,\n        useGlobalFilter,\n        useGroupBy,\n        useSortBy,\n        useExpanded,\n    );\n    return (\n        <>\n            <div className={\"control-panel\"}>\n                {/* Global Filter */}\n                <GlobalFilter\n                    globalFilter={state.globalFilter}\n                    setGlobalFilter={setGlobalFilter}\n                />\n                <ColumnManager getToggleHideAllColumnsProps={getToggleHideAllColumnsProps}\n                               allColumns={allColumns}\n                               setColumnOrder={setColumnOrder}\n                />\n                <br/>\n                <div style={{margin: \"auto\", width: \"max-content\"}}>Displaying {rows.length} results</div>\n            </div>\n            {/*<pre>{JSON.stringify(state.hiddenColumns, null, 2)}</pre>*/}\n            {/* The Table */}\n            <br/>\n            <table {...getTableProps()}>\n                <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                                {column.id === \"expander\" ?\n                                    <span className={\"column-title\"}\n                                          style={{\n                                              top: \"-1%\",\n                                              left: \"5%\",\n                                              width: \"100px\"\n                                          }}>{column.render('Header')}</span>\n                                    : <>\n                                        <span className={\"column-title\"}>{column.render('Header')}</span>\n                                        {/* Add a sort direction indicator */}\n                                        <span className={\"column-icons\"}>\n                                            <i className={\"fa fa-close\"} onClick={() => column.toggleHidden(true)}/>\n                                            <i className={\"fa fa-chevron-up\"}/>\n                                            <i className={\"fa fa-chevron-down\"}/>\n                                            {column.canGroupBy ? (\n                                                // If the column can be grouped, let's add a toggle\n                                                <i {...column.getGroupByToggleProps()}\n                                                   className={\"fa fa-indent\"}\n                                                   style={{\n                                                       color: column.isGrouped ? \"green\" : '#6D6D6D',\n                                                   }}/>\n                                            ) : null}\n                                        </span>\n                                    </>\n                                }\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                {rows.map(\n                    (row, i) => {\n                        prepareRow(row);\n                        return (\n                            <React.Fragment key={row.getRowProps().key}>\n                                {/* first we display the params of the experiment */}\n                                <tr {...row.getRowProps()}>\n                                    {row.cells.map(cell => {\n                                        return (\n                                            <td\n                                                // color the cell depending on what type it is given\n                                                // from the useGroupBy hook\n                                                {...cell.getCellProps()}\n                                                className={cell.isGrouped ? \"grouped-column\" : \"\"}\n                                                style={{\n                                                    background: cell.isGrouped\n                                                        ? '#a6ff4474'\n                                                        : cell.isAggregated\n                                                            ? '#ffa10045'\n                                                            : cell.isPlaceholder\n                                                                ? '#ff330042'\n                                                                : 'white',\n                                                }}\n                                            >\n                                                {cell.isGrouped ? (\n                                                    // If it's a grouped cell, add an expander and row count\n                                                    <>\n                                                  <span {...row.getToggleRowExpandedProps()}>\n                                                    {row.isExpanded ? <i className={\"fa fa-chevron-down\"}/> :\n                                                        <i className={\"fa fa-chevron-right\"}/>}\n                                                  </span>{' '}\n                                                        {cell.render('Cell')} ({row.subRows.length})\n                                                    </>\n                                                ) : cell.isAggregated ? (\n                                                    // If the cell is aggregated, use the Aggregated\n                                                    // renderer for cell\n                                                    cell.render('Aggregated')\n                                                ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                                                    // Otherwise, just render the regular cell\n                                                    cell.render('Cell')\n                                                )}\n                                            </td>\n                                        )\n                                    })}\n                                </tr>\n                                {/*then the audios if the row is expanded */}\n                                {(row.isExpanded && !row.cells.some(cell => cell.isGrouped)) &&\n                                <tr>\n                                    <td colSpan={rows.length} className={\"audio-container\"}>\n                                        {audios[row.original.id] &&\n                                        audios[row.original.id].map((x, i) => {\n                                            return <Waveform\n                                                key={x}\n                                                url={\"http://localhost:5000/\" + x + \".mp3\"}\n                                                title={x.split(\"/\")[4]}\n                                                handleFinish={() => {\n                                                    const list = audios[row.original.id];\n                                                    const index = list.indexOf(x) + 1;\n                                                    if (index < list.length) {\n                                                        const id = list[index].split(\"/\")[4];\n                                                        const element = document.getElementById(\"play-\" + id);\n                                                        element.click()\n                                                    }\n                                                }}\n                                            />\n                                        })}\n                                    </td>\n                                </tr>\n                                }\n                            </React.Fragment>\n                        )\n                    }\n                )}\n                </tbody>\n            </table>\n        </>\n    )\n};\n\nexport default function ExperimentsTable() {\n    const [columns, setColumns] = useState([]);\n    const [data, setData] = useState([]);\n    useEffect(() => {\n        // columns are dynamically defined so we need the set of\n        // keys in all the experiments\n        let columns = new Set();\n        jsonData.forEach(\n            item => Object.keys(item).forEach(val => {\n                if (![\"_id\", \"audios\"].includes(val)) {\n                    columns.add(val)\n                }\n            }));\n        columns = Array.from([...columns]);\n        // format and prepend extra columns for the UI\n        columns = columns.map(name => {\n            return {Header: name, accessor: name, id: name}\n        });\n        // column for expanding/collapsing audios\n        columns.unshift({\n            Header: \"Audios\",\n            id: 'expander',\n            Cell: ({row}) => (\n                <span {...row.getToggleRowExpandedProps()} className={\"grouped-column\"}>\n                            {row.isExpanded ?\n                                <i className={\"fa fa-chevron-down\"}/>\n                                : <i className={\"fa fa-chevron-right\"}/>}\n                    {(!row.cells.some(cell => cell.isGrouped) && row.original.hasOwnProperty(\"audios\")) ?\n                        `(${row.original.audios.length.toString()})`\n                        : null}\n                        </span>\n            )\n        });\n        setColumns(columns);\n        setData(jsonData);\n    }, []);\n    const audios = {};\n    data.forEach(exp => audios[exp.id] = exp.audios);\n    const memoColumns = useMemo(() => columns, [columns]);\n    const memoData = useMemo(() => data, [data]);\n    // console.log(memoColumns);\n    return (\n        <Table columns={memoColumns} data={memoData} audios={audios}/>\n    )\n}",["37","38"],"/home/antoine/Gdrive/Autoencoders/axx/frontend/src/components/Waveform.jsx",["39"],"import React, {useEffect, useRef, useState} from \"react\";\nimport WaveSurfer from \"wavesurfer.js\";\n\nimport \"./Waveform.css\";\n\n\nconst waveSurferOptions = ref => ({\n    container: ref,\n    waveColor: \"lightgray\",\n    progressColor: \"#2682b4\",\n    cursorColor: \"#2682b4\",\n    barWidth: 1,\n    barHeight: 4,\n    maxCanvasWidth: 200,\n    responsive: true,\n    height: 50,\n    // Use the PeakCache to improve rendering speed of large waveforms.\n    partialRender: false\n});\n\nexport default function Waveform({url, title, handleFinish}) {\n    const waveformRef = useRef(null);\n    const wavesurfer = useRef(null);\n    const [playing, setPlay] = useState(false);\n\n    // create new WaveSurfer instance\n    // On component mount and when url changes\n    useEffect(() => {\n        setPlay(false);\n\n        const options = waveSurferOptions(waveformRef.current);\n        wavesurfer.current = WaveSurfer.create(options);\n\n        wavesurfer.current.load(url);\n\n        wavesurfer.current.on(\"ready\", function () {\n            if (wavesurfer.current) {\n                wavesurfer.current.setVolume(0.5);\n            }\n        wavesurfer.current.on(\"seek\", () => {\n            setPlay(true);\n            wavesurfer.current.play()\n        });\n        wavesurfer.current.on(\"finish\", () => {\n            handleFinish()\n            setPlay(false)\n        });\n        });\n        // Removes events, elements and disconnects Web Audio nodes.\n        // when component unmount\n        return () => wavesurfer.current.destroy();\n    }, [url]);\n\n    const handlePlayPause = () => {\n        setPlay(!playing);\n        wavesurfer.current.playPause();\n    };\n\n    return (\n        // the container\n        <div className={\"waveform-element\"}>\n            {/* the header */}\n            <div className={\"waveform-header\"}>\n                <i className={\"play-button fa \" + (playing ? \"fa-pause-circle\" : \"fa-play-circle-o\")}\n                   id={`play-${title}`}\n                   onClick={handlePlayPause}>\n                </i>\n                <span className={\"waveform-title\"}>\n                {\"  \" + title}\n                </span>\n            </div>\n            {/* the waveform (ui kit must be turned off for it to display correctly) */}\n            <div className={\"waveform\"}\n                 ref={waveformRef}>\n            </div>\n        </div>\n    );\n}",["40","41"],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":21,"column":15,"nodeType":"48","messageId":"49","endLine":21,"endColumn":19},{"ruleId":"46","severity":1,"message":"50","line":22,"column":15,"nodeType":"48","messageId":"49","endLine":22,"endColumn":17},{"ruleId":"51","severity":1,"message":"52","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":13},{"ruleId":"51","severity":1,"message":"53","line":3,"column":8,"nodeType":"48","messageId":"49","endLine":3,"endColumn":18},{"ruleId":"51","severity":1,"message":"54","line":9,"column":5,"nodeType":"48","messageId":"49","endLine":9,"endColumn":15},{"ruleId":"51","severity":1,"message":"55","line":143,"column":9,"nodeType":"48","messageId":"49","endLine":143,"endColumn":23},{"ruleId":"51","severity":1,"message":"56","line":145,"column":9,"nodeType":"48","messageId":"49","endLine":145,"endColumn":30},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"57","severity":1,"message":"58","line":52,"column":8,"nodeType":"59","endLine":52,"endColumn":13,"suggestions":"60"},{"ruleId":"42","replacedBy":"61"},{"ruleId":"44","replacedBy":"62"},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"@typescript-eslint/no-unused-vars","'name' is assigned a value but never used.","Identifier","unusedVar","'id' is assigned a value but never used.","no-unused-vars","'axios' is defined but never used.","'ReactTable' is defined but never used.","'useFilters' is defined but never used.","'visibleColumns' is assigned a value but never used.","'preGlobalFilteredRows' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleFinish'. Either include it or remove the dependency array. If 'handleFinish' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["65"],["63"],["64"],"no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [handleFinish, url]",{"range":"68","text":"69"},[1514,1519],"[handleFinish, url]"]